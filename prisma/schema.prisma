// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdFlightTrackings FlightTracking[] @relation("CreatedFlightTrackings")
  flightSubscriptions    FlightSubscription[]
  notifications          Notification[]
  pushSubscriptions      PushSubscription[]

  @@map("users")
}

model FlightTracking {
  id              String           @id @default(cuid())
  createdByUserId String?          // Usuario que creó el tracking (opcional)
  tripId          String?          // ID del viaje al que pertenece este vuelo
  flightId        String           // Identificador del vuelo (e.g., "AA123-2024-08-26")
  airline         String
  flightNumber    String
  scheduledDeparture DateTime
  origin          String
  destination     String
  status          String           @default("SCHEDULED") // FlightStatus as String
  gate            String?
  terminal        String?
  delay           Int              @default(0) // minutos de retraso
  isActive        Boolean          @default(true)
  stopReason      String? // StopReason as String
  lastPolledAt    DateTime?
  nextPollAt      DateTime?
  pollInterval    Int              @default(21600) // segundos (6h por defecto)
  retryCount      Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  createdByUser   User?              @relation("CreatedFlightTrackings", fields: [createdByUserId], references: [id], onDelete: Cascade)
  subscriptions   FlightSubscription[] // Usuarios suscritos a este tracking
  notifications   Notification[]

  // Índice único por vuelo y viaje (un tracking por vuelo por viaje)
  @@unique([flightId, tripId])
  @@index([isActive, nextPollAt])
  @@index([tripId])
  @@map("flight_tracking")
}

// Nueva tabla para manejar suscripciones de usuarios a vuelos
model FlightSubscription {
  id              String   @id @default(cuid())
  userId          String
  flightTrackingId String
  tripId          String?  // Para filtrar por viaje
  isActive        Boolean  @default(true)
  receiveNotifications Boolean @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  flightTracking  FlightTracking @relation(fields: [flightTrackingId], references: [id], onDelete: Cascade)

  // Un usuario solo puede suscribirse una vez al mismo tracking
  @@unique([userId, flightTrackingId])
  @@index([userId, isActive])
  @@index([tripId])
  @@map("flight_subscriptions")
}

model Notification {
  id                String              @id @default(cuid())
  userId            String
  flightTrackingId  String
  type              String // NotificationType as String
  title             String
  message           String
  data              String? // JSON data as String
  isRead            Boolean             @default(false)
  createdAt         DateTime            @default(now())

  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  flightTracking FlightTracking @relation(fields: [flightTrackingId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([createdAt])
  @@map("notifications")
}

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String   @unique
  p256dh    String
  auth      String
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("push_subscriptions")
}
