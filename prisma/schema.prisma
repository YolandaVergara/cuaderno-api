// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  flightTracking FlightTracking[]
  notifications  Notification[]

  @@map("users")
}

model FlightTracking {
  id              String           @id @default(cuid())
  userId          String
  flightId        String           // Identificador del vuelo (e.g., "AA123-2024-08-26")
  airline         String
  flightNumber    String
  scheduledDeparture DateTime
  origin          String
  destination     String
  status          FlightStatus     @default(SCHEDULED)
  gate            String?
  terminal        String?
  delay           Int              @default(0) // minutos de retraso
  isActive        Boolean          @default(true)
  stopReason      StopReason?
  lastPolledAt    DateTime?
  nextPollAt      DateTime?
  pollInterval    Int              @default(21600) // segundos (6h por defecto)
  retryCount      Int              @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications Notification[]

  @@unique([userId, flightId])
  @@index([nextPollAt, isActive])
  @@map("flight_tracking")
}

model Notification {
  id                String              @id @default(cuid())
  userId            String
  flightTrackingId  String
  type              NotificationType
  title             String
  message           String
  data              Json? // datos adicionales del cambio
  isRead            Boolean             @default(false)
  createdAt         DateTime            @default(now())

  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  flightTracking FlightTracking @relation(fields: [flightTrackingId], references: [id], onDelete: Cascade)

  @@index([userId, isRead])
  @@index([createdAt])
  @@map("notifications")
}

enum FlightStatus {
  SCHEDULED
  DELAYED
  BOARDING
  DEPARTED
  ARRIVED
  CANCELLED
  DIVERTED
}

enum StopReason {
  DEPARTED
  CANCELLED
  TIMEOUT
  USER_CANCELLED
}

enum NotificationType {
  STATUS_CHANGE
  GATE_CHANGE
  TERMINAL_CHANGE
  DELAY_CHANGE
  FLIGHT_CANCELLED
}
